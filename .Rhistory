# Initialize empty matrix
datMat <- matrix(data=NA, nrow = n*t, ncol = p)
for(i in 1:p){
datMat[,i] <- sample(0:1, n*t, replace=T,prob=c(norm(runif(2))))
}
datMat
j*n-10
j=1
j*n-10
j*n-9
j=2
j*n-9
# Initialize empty matrix
datMat <- matrix(data=NA, nrow = n*t, ncol = p)
# loop through each pathogen and create successes and failures for each time point
for(i in 1:p){
for(j in 1:t){
datMat[j*n-9,i] <- sample(0:1, n, prob=c(norm(runif(2))))
}
}
# loop through each pathogen and create successes and failures for each time point
for(i in 1:p){
for(j in 1:t){
datMat[j*n-9,i] <- sample(0:1, n, replace = T, prob=c(norm(runif(2))))
}
}
# loop through each pathogen and create successes and failures for each time point
for(i in 1:p){
for(j in 1:t){
datMat[j*n-10,i] <- sample(0:1, n, replace = T, prob=c(norm(runif(2))))
}
}
sample(0:1, n, replace = T, prob=c(norm(runif(2))))
datMat
1*n-9
2*n-9
3*n-9
# loop through each pathogen and create successes and failures for each time point
for(i in 1:p){
for(j in 1:t){
datMat[(j*n-10):(j*n-10)+9,i] <- sample(0:1, n, replace = T, prob=c(norm(runif(2))))
}
}
(j*n-10):(j*n-10)+9
(j*n-10):((j*n-10)+9)
j=1
(j*n-10):((j*n-10)+9)
(j*n-9):((j*n-9)+9)
# loop through each pathogen and create successes and failures for each time point
for(i in 1:p){
for(j in 1:t){
datMat[(j*n-9):((j*n-9)+9),i] <- sample(0:1, n, replace = T, prob=c(norm(runif(2))))
}
}
datMat
(j*n-(n-1)):((j*n-(n-1))+(n-1))
# Params:
n <- 12
p <- 4
t <- 4
pathNames <- LETTERS[1:p]
ID <- rep(1:n, t)
# Initialize empty matrix
datMat <- matrix(data=NA, nrow = n*t, ncol = p)
# loop through each pathogen and create successes and failures for each time point
for(i in 1:p){
for(j in 1:t){
datMat[(j*n-(n-1)):((j*n-(n-1))+(n-1)),i] <- sample(0:1, n, replace = T, prob=c(norm(runif(2))))
}
}
datMat
Time <- rep(1:t, each=n)
Time
names(datMat)
names(datMat) <- pathNames
datMat
colnames(datMat) <- pathNames
datMat
pathNames <- LETTERS[1:p] # create fake species names of pathogens
ID <- rep(1:n, t) # create IDs
Time <- rep(1:t, each=n) # create time step vector
# Initialize empty matrix
datMat <- matrix(data=NA, nrow = n*t, ncol = p)
# loop through each pathogen and create successes and failures for each time point for each path.
for(i in 1:p){
for(j in 1:t){
datMat[(j*n-(n-1)):((j*n-(n-1))+(n-1)),i] <- sample(0:1, n, replace = T, prob=c(norm(runif(2))))
}
}
colnames(datMat) <- pathNames
datMat
TempVar <- data.frame(ID, Time, datMat)
head(TempVar)
# split data frame by time
split(TempVar, TempVar$Time)
# split data frame by time
TempVarSplit <- split(TempVar, TempVar$Time)
TempVarSplit$`1`[,3:(3+(3+(p-1)))]
3:(3+(3+(p-1)))
3:(3+(p-1))
TempVarSplit$`1`[,3:(3+(p-1))]
cor(TempVarSplit$`1`[,3:(3+(p-1))])
library(corrplot)
mat <- cor(TempVarSplit$`1`[,3:(3+(p-1))])
corrplot(mat)
corrplot(mat, method="color", type='lower')
# Params:
n <- 100 # number of samples/subjects
p <- 7 # number of pathogen species
t <- 4 # number of time points
###############################################################
# Define a function that normalizes
# pathogen prob. of infection values so all sum to 1
norm <- function(vec){
final <- vec/sum(vec)
return(final)
}
pathNames <- LETTERS[1:p] # create fake species names of pathogens
ID <- rep(1:n, t) # create IDs
Time <- rep(1:t, each=n) # create time step vector
# Initialize empty matrix
datMat <- matrix(data=NA, nrow = n*t, ncol = p)
# loop through each pathogen and create successes and failures for each time point for each path.
for(i in 1:p){
for(j in 1:t){
datMat[(j*n-(n-1)):((j*n-(n-1))+(n-1)),i] <- sample(0:1, n, replace = T, prob=c(norm(runif(2))))
}
}
# name pathogen data with pathgen species name
colnames(datMat) <- pathNames
# generate final fake data frame:
TempVar <- data.frame(ID, Time, datMat)
# split data frame by time
TempVarSplit <- split(TempVar, TempVar$Time)
mat <- cor(TempVarSplit$`1`[,3:(3+(p-1))])
library(corrplot)
corrplot(mat, method="color", type='lower')
corrplot(cor(TempVarSplit$`2`[,3:(3+(p-1))]),
method="color", type='lower')
mat
# read in our data (using partial data right now (only three reps)) - Alex
RealData <- read.csv("realNWdata1.csv",
header = FALSE,
stringsAsFactors = FALSE)
library(dplyr)
# read in our data (using partial data right now (only three reps)) - Alex
RealData <- read.csv("realNWdata1.csv",
header = FALSE,
stringsAsFactors = FALSE)
setwd("~/Documents/GitHub/vaccines/vaccines")
# read in our data (using partial data right now (only three reps)) - Alex
RealData <- read.csv("realNWdata1.csv",
header = FALSE,
stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
names(RealData) <- c('Fitness', 'Func.Calls', "Transcendence", 'Network.Size')
RealData$Transcendence <- as.character(RealData$Transcendence)
RealData$Network.Size <- as.character(RealData$Network.Size)
ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) + geom_boxplot(alpha=0.7) + theme_bw()
# read in our data (using partial data right now (only three reps)) - Alex
toyData <- read.csv("toyNWdata.csv",
header = FALSE,
stringsAsFactors = FALSE)
names(toyData) <- c('Fitness', 'Func.Calls', 'Network' , "Transcendence")
toyData$Network <- as.factor(toyData$Network)
toyData$Transcendence <- as.character(toyData$Transcendence)
toyData$Network <- factor(toyData$Network, levels = c('1', '2', '3','4'),
labels = c('lattice', 'star', 'chain', 'Erdos-Renyi'))
ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.8, .8))
ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.8, .8))
ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.8, .8))
names(RealData) <- c('Fitness', 'Func.Calls', "Transcendence", 'Network.Size')
# read in our data (using partial data right now (only three reps)) - Alex
RealData <- read.csv("realNWdata1.csv",
header = FALSE,
stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
names(RealData) <- c('Fitness', 'Func.Calls', "Transcendence", 'Network.Size')
RealData$Transcendence <- as.character(RealData$Transcendence)
RealData$Network.Size <- as.factor(RealData$Network.Size)
ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.8, .8))
ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.2, .8))
ggplot(RealData, aes(y = log10(Fitness), x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.2, .8))
ggplot(RealData, aes(y = log10(Fitness+1), x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.2, .8))
ggplot(RealData, aes(y = log10(Fitness+1), x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.2, .8))
ggplot(RealData, aes(y = log10(Fitness), x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.2, .8))
ggplot(toyData, aes(y = log10(Fitness), x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.8, .8))
ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) + geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.2, .8))
# create the figure
ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.2, .8))
# plot figures
ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.8, .8))
# plot figures for fittness
ft <- ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'))
ft
# plot figures for fittness
fr <- ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.2, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'))
fr
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "Fitness (prop. supercritical)") +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'))
ct
# plot figures for calls
ct <- ggplot(toyData, aes(y = log10(Func.Calls), x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "log10(# Function Calls)") +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'))
ct
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "# Function Calls") +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'))
# plot figures for calls
cr <- ggplot(RealData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "# Function Calls") +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'))
cr
# plot figures for calls
cr <- ggplot(RealData, aes(y = Func.Calls, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "# Function Calls") +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'))
cr
# plot figures for fittness
fr <- ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Size", y = "Fitness (prop. supercritical)", title = 'Fitness by Real Networks') +
theme(legend.position=c(.2, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'))
# plot figures for fittness
ft <- ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "Fitness (prop. supercritical)", title = 'Fitness by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'))
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'))
# plot figures for calls
cr <- ggplot(RealData, aes(y = Func.Calls, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 20) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Real Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'))
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
# plot figures for fittness
fr <- ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Size", y = "Fitness (prop. supercritical)", title = 'Fitness by Real Networks') +
theme(legend.position=c(.2, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "Dose")
fr
# plot figures for fittness
fr <- ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Size", y = "Fitness (prop. supercritical)", title = 'Fitness by Real Networks') +
theme(legend.position=c(.2, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
# plot figures for fittness
ft <- ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "Fitness (prop. supercritical)", title = 'Fitness by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'), , name = "trans.")
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'), , name = "trans.")
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for calls
cr <- ggplot(RealData, aes(y = Func.Calls, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Real Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
# plot figures for fittness
ft <- ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "Fitness (prop. supercritical)", title = 'Fitness by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for fittness
ft <- ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "Fitness (prop. supercritical)", title = 'Fitness by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for fittness
fr <- ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Size", y = "Fitness (prop. supercritical)", title = 'Fitness by Real Networks') +
theme(legend.position=c(.2, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
library(cowplot)
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
library(dplyr)
library(ggplot2)
# read in our data for 20 reps of 3 trans values for 9 different nws
RealData <- read.csv("realNWdata1.csv",
header = FALSE,
stringsAsFactors = FALSE)
# add names
names(RealData) <- c('Fitness', 'Func.Calls', "Transcendence", 'Network.Size')
# convert to character values
RealData$Transcendence <- as.character(RealData$Transcendence)
RealData$Network.Size <- as.factor(RealData$Network.Size)
# plot figures for fittness
fr <- ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Size", y = "Fitness (prop. supercritical)", title = 'Fitness by Real Networks') +
theme(legend.position=c(.2, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
# read in our data 20 reps for four toy nworks for 2 trans values
toyData <- read.csv("toyNWdata.csv",
header = FALSE,
stringsAsFactors = FALSE)
# add names
names(toyData) <- c('Fitness', 'Func.Calls', 'Network' , "Transcendence")
# make numeric values character strings
toyData$Network <- as.factor(toyData$Network)
toyData$Transcendence <- as.character(toyData$Transcendence)
# change factor names to real names of nws
toyData$Network <- factor(toyData$Network, levels = c('1', '2', '3','4'),
labels = c('lattice', 'star', 'chain', 'Erdos-Renyi'))
# plot figures for fittness
ft <- ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "Fitness (prop. supercritical)", title = 'Fitness by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Toy Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for calls
cr <- ggplot(RealData, aes(y = Func.Calls, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Real Networks') +
theme(legend.position=c(.8, .8)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
library(cowplot)
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Toy Networks') +
theme(legend.position=c(2, 2)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for calls
cr <- ggplot(RealData, aes(y = Func.Calls, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Function Calls by Real Networks') +
theme(legend.position=c(2, 2)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
library(cowplot)
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
# plot figures for fittness
ft <- ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "Fitness (prop. supercritical)", title = 'Fitness by Toy Networks') +
theme(legend.position=c(.5, .1)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
# plot figures for fittness
ft <- ggplot(toyData, aes(y = Fitness, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "Fitness (prop. supercritical)", title = 'Fitness by Toy Networks') +
theme(legend.position=c(.1, .5)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for fittness
fr <- ggplot(RealData, aes(y = Fitness, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Size", y = "Fitness (prop. supercritical)", title = 'Fitness by Real Networks') +
theme(legend.position=c(.1, .5)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Func. Calls by Toy Networks') +
theme(legend.position=c(2, 2)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for calls
cr <- ggplot(RealData, aes(y = Func.Calls, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Func. Calls by Real Networks') +
theme(legend.position=c(2, 2)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
library(cowplot)
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
# plot figures for calls
ct <- ggplot(toyData, aes(y = Func.Calls, x = Network, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Calls by Toy Networks') +
theme(legend.position=c(2, 2)) +
scale_fill_manual(values = c('grey', 'steelblue'), name = "trans.")
# plot figures for calls
cr <- ggplot(RealData, aes(y = Func.Calls, x = Network.Size, fill = Transcendence)) +
geom_boxplot() +
theme_minimal(base_size = 18) +
labs(x="Network Type", y = "# Function Calls", title = 'Calls by Real Networks') +
theme(legend.position=c(2, 2)) +
scale_fill_manual(values = c('grey', 'steelblue', 'black'), name = "trans.")
library(cowplot)
cowplot::plot_grid(ft, ct, fr, cr, labels = c("A", "B", "C", "D"), align = "v")
